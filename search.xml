<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[前端学习笔记系列-6.CSS选择器优先级以及样式冲突]]></title>
      <url>http://www.wusijie.tk/2016/08/09/css-selector/</url>
      <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote>
<p>样式的层级关系，选择器优先级，样式冲突，以及抽离样式模块怎么写，说出思路，有无实践经验</p>
</blockquote>
<p>通常我们可以将CSS的优先级由高到低分为==六组==：</p>
<ul>
<li>无条件优先的属性只需要在属性后面使用 !important 。它会覆盖页面内任何位置定义的元素样式。当然，IE 6不支持这个属性，于是它也成为一种hack被很多人所熟知，真正使命被人淡忘。</li>
<li>第二高位的优先属性是在html中给元素标签加style。由于该方法会造成CSS的难以管理，所以不推荐使用。</li>
<li>第三级优先的属性是由一个或多个id选择器来定义的。例如 #id{margin:0;} 会覆盖 .classname{margin:3px;}。</li>
<li>第四级的属性由一个或多个 类选择器、属性选择器、伪类选择器定义。如 .classname{margin:3px;} 会覆盖 div{margin:6px;}类选择器</li>
<li>第五级由一个或多个 类型选择器定义。如 div{margin:6px;}  覆盖  *{margin:10px;} 。</li>
<li>最低一级的选择器是为一个通配选择器，用*{margin:10px;}这样的类型来定义。</li>
</ul>
<hr>
<p>另外，可以用一句极为简单的话来描述CSS优先级问题：当一个CSS选择器拥有更多的高级别属性时，它的优先级就会比较高。如 #i100 <em>.c20 </em>.c10{} 的优先级就会高于 #i100 *.c10 div p span em{} ，这是由于前者拥有一个第三级和两个第四级的选择器而后者第三级和第四级的选择器各为一个，当然前者优先级会比较高。<br>CSS选择器是一个非常灵活的CSS属性，优雅的使用它会使你的页面代码不再臃肿，而且还可以作为hack的妙用方法之一。<br>当比较多个相同级别的CSS选择器优先级时，它们定义的位置将决定一切。下面从位置上将CSS优先级由高到低分为六级：<br>位于<head>标签里的<style>中所定义的CSS拥有最高级的优先权。<br>第二级的优先属性由位于 <style/>标签中的 @import 引入样式表所定义。<br>第三级的优先属性由<link/>标签所引入的样式表定义。<br>第四级的优先属性由<link/>标签所引入的样式表内的 @import 导入样式表定义。<br>第五级优先的样式有用户设定。<br>最低级的优先权由浏览器默认。<br>理解了这些CSS优先级问题后，也就不必苦恼于样式定于中的此类问题了。</p>
<h3 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h3><p>类选择器：.className {margin:100px;}<br>属性选择器：a[href] {margin:100px;}  带有href属性的a标签<br>伪类选择器：p:hover {margin:100px;} p标签的hover事件，已经定义好的事件：hover，active，visited，link<br>提示：在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。<br>提示：在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。<br>提示：伪类名称对大小写不敏感。</p>
<h3 id="CSS样式冲突解决方法："><a href="#CSS样式冲突解决方法：" class="headerlink" title="CSS样式冲突解决方法："></a>CSS样式冲突解决方法：</h3><p>解决方法有很多，如果可以对html改动的话，就给你需要细化的页面元素加多一个class或者ID就行了，当然这种方法应该不是你想要的。那么接下来是不改变HTML的情况下，直接用css的方法来实现你想要的效果——</p>
<h4 id="方法一-细化选择符"><a href="#方法一-细化选择符" class="headerlink" title="方法一 细化选择符"></a>方法一 细化选择符</h4><p>假如全局是这样来定义一个元素的样式的：.abc {background:#000}，同时这个class为abc的元素是隶属于某个元素的，比如下面这样的html代码结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;container&quot;&gt;</div><div class="line">    &lt;div class=&quot;abc&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>那么在细化css里面，只需要在.abc前面加多一个父元素的选择符就行了：<br>.container .abc {background:#fff}<br>这样.container .abc的优先级就大于了.abc，自然细化css里面的background设置也就不会被全局CSS覆盖了~~</p>
<h4 id="方法二-提升样式的优先级"><a href="#方法二-提升样式的优先级" class="headerlink" title="方法二 提升样式的优先级"></a>方法二 提升样式的优先级</h4><p>这种方法个人不太推荐，相对而言会简单粗暴一些。同样是上面的例子，在细化CSS里面，只要在样式后面加一个!important，例如这样：<br><code>.abc {background:#fff !improtant;}</code><br>这个样式的优先级就会默认提升到顶级，全局样式就无法影响到它了。</p>
<h4 id="方法三-改变两个样式的加载顺序"><a href="#方法三-改变两个样式的加载顺序" class="headerlink" title="方法三 改变两个样式的加载顺序"></a>方法三 改变两个样式的加载顺序</h4><p>这种方法比较简单，就是只要把细化css加载在全局css之后就行了，这样后面的样式就会自动覆盖前面的样式。不过如果你的html里面这两个样式表的加载顺序是先细化后全局的话，就要稍微调整一下代码才行。</p>
</style></head></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端学习笔记系列-5.替换元素/非替换元素、块级元素、行内元素]]></title>
      <url>http://www.wusijie.tk/2016/08/09/element/</url>
      <content type="html"><![CDATA[<p>元素是文档结构的基础，在css里面，每个元素生成了包含内容的框（box）,大家都叫“盒子”。但是不同的元素显示方式是不同的，有占据一整行的，有水平一个挨着一个的。比如：div 与span的方式不一样。</p>
<blockquote>
<p>什么是替换元素与非替换元素</p>
</blockquote>
<h3 id="替换元素："><a href="#替换元素：" class="headerlink" title="替换元素："></a>替换元素：</h3><p>替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。<br>比如：<figure class="highlight plain"><figcaption><span>type="text"</span><a href="/>```">，这是一个文本输入框，换一个其他的时候，浏览器显示就不一样</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(X)HTML中的```&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;```都是替换元素，这些元素都没有实际的内容。</div><div class="line"></div><div class="line">### 非替换元素：</div><div class="line">(X)HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。</div><div class="line">比如```&lt;p&gt;wanmei.com&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>浏览器将把这段内容直接显示出来。<br>除了这两字，还有两种非常属性的元素，显示元素，他分为两种情况，一种是‘块及元素’ ‘block’，还有一种是“行内元素”inline，大家也叫“内联元素”。</p>
<h3 id="块及元素"><a href="#块及元素" class="headerlink" title="块及元素"></a>块及元素</h3><p>他最明显的特征就是独自占领一行，自动充满父级元素的内容区域，绝不会让别人“侵略”（当然可以通过其他方式去改变他）。<br>常见的有：div，p..等等。<br>通过CSS设定了浮动（float属性，可向左浮动或向右浮动）以及设定显示（display）属性为“block”或“list-item”的元素都是块级元素。这个地方浮动是一个比较特殊的情况，可以详查浮动这个知识</p>
<h3 id="行内元素："><a href="#行内元素：" class="headerlink" title="行内元素："></a>行内元素：</h3><p>上面说块及元素独自占领一行，行内元素就没这么霸道了，他可以左右都允许有元素，最常见的就是<code>&lt;a&gt;&lt;/a&gt;</code><br>通过display:’inline’设置以后都会变成行内元素。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端学习笔记系列-4.position 和 display]]></title>
      <url>http://www.wusijie.tk/2016/08/09/position-display/</url>
      <content type="html"><![CDATA[<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p>position属性取值：==static(默认)、relative、absolute、fixed、inherit==。<br>postision：static；始终处于文档流给予的位置。看起来好像没有用，但它可以快速取消定位，让top，right，bottom，left的值失效。在切换的时候可以尝试这个方法。<br>除了static值，在其他三个值的设置下，z-index才会起作用。（确切地说z-index只在定位元素上有效）<br>position：relative和absolute都可以用于定位，区别在于前者的div还属于正常的文档流，后者已经是脱离了正常文档流，不占据空间位置，不会将父类撑开。定位原点relative是相对于它在正常流中的默认位置偏移，它原本占据的空间任然保留；absolute相对于第一个position属性值不为static的父类。所以设置了position：absolute，其父类的该属性值要注意，而且overflow：hidden也不能乱设置，因为不属于正常文档流，不会占据父类的高度，也就不会有滚动条。<br>fixed旧版本IE不支持，却是很有用，定位原点相对于浏览器窗口，而且不能变。常用于header，footer，或者一些固定的悬浮div，随滚动条滚动又稳定又流畅，比JS好多了。fixed可以有很多创造性的布局和作用，兼容性是问题。<br>position：inherit。规定从父类继承position属性的值，所以这个属性也是有继承性的，@一丝yisi 前辈注意下。但是任何版本的IE都不支持该属性值。</p>
<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>float属性取值：==none(默认)、left、right、inherit==。<br>float：left(或right)，向左（或右）浮动，直到它的边缘碰到包含框或另一个浮动框为止。且脱离普通的文档流，会被正常文档流内的块框忽略。不占据空间，无法将父类元素撑开。<br>任何元素都可以浮动，浮动元素会生成一个块级框，不论它本身是何种元素。因此，没有必要为浮动元素设置display：block。<br>如果浮动非替换元素，则要指定一个明确的width，否则它们会尽可能的窄。（什么叫替换元素？根据元素本身的特点定义的， (X)HTML中的img、input、textarea、select、object都是替换元素，这些元素都没有实际的内容。 (X)HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。）<br>    不想脱离出去讲清理浮动- -||，还是少说些。。。<br>最直接的clear属性，该属性表示的是框的哪边不应该挨着浮动框。这个属性是对元素本身而言，通过自动为该元素增加上外边距实现的（css1和css2），或者在上外边距之上增加清除空间，而外边距本身不改变的方式（css2.1）。clear的缺陷是可能要添加额外无意义的标签。<br>通过父类的浮动也可以清理子类浮动，将空间撑开。这有点像负负得正。但原理应该是浮动的元素也是按照文档流的方式布局，只不过它们是另外一个独立的文档流，不同于普通文档流，暂时叫它浮动文档流？<br>hasLayout和BFC都可以清理浮动。overflow：hidden；zoom:1；</p>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>display属性取值：==none、inline、inline-block、block、table相关属性值、inherit==。<br>display属性规定元素应该生成的框的类型。文档内任何元素都是框，块框或行内框。<br>display：none和visiability：hidden都可以隐藏div，区别有点像absolute和relative，前者不占据文档的空间，后者还是占据文档的位置。<br>display：inline和block，又叫行内元素和块级元素。表现出来的区别就是block独占一行，在浏览器中通常垂直布局，可以用margin来控制块级元素之间的间距（存在margin合并的问题，就是@寒冬winter 磨叽的margin collapse么- -||，插一句， 只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。）；而inline以水平方式布局，垂直方向的margin和padding都是无效的，大小跟内容一样，且无法设置宽高。inline就像塑料袋，内容怎么样，就长得怎么样；block就像盒子，有固定的宽和高。<br>inline-block就介于两者之间。<br>table相关的属性值可以用来垂直居中，效果一般。</p>
<h3 id="定位机制"><a href="#定位机制" class="headerlink" title="定位机制"></a>定位机制</h3><p>上面三个属性都属于CSS定位属性。CSS三种基本的定位机制：==普通流、浮动、绝对定位==。<br><strong>随便扯一些居中布局</strong>：<br>宽高固定可以利用负margin。.center{top：50%;margin-top:-height/2;left:50%;margin-left:-width/2;}话说现在觉得这个方法略微扯淡，要是宽高都知道，直接计算出x的值，设置个margin：x;就好了，多这么多代码，没劲。所以别尽看网上的代码，能简则简，本来就没有模式。<br>宽高不固定的元素。.center{display：inline-block},父类设置{text-align:center}<br>垂直居中table-cell不说了<br>{line-height：height;vertical-align:middle;}<br>{position:absolute;top:0;bottom:0;margin:auto}别忘记给父类定位{position:relative;}</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端学习笔记系列-3.如何保持浮层水平垂直居中]]></title>
      <url>http://www.wusijie.tk/2016/08/09/center/</url>
      <content type="html"><![CDATA[<blockquote>
<p>方法一：给出父元素确定的height，然后margin:0 auto;</p>
<p>方法二：position：absolute，top:50%,left:50%,margin-top:-窗体height一半;margin-left:-窗体width一半；</p>
<p>方法三（推荐）：使用transform的平移代替margin，无需固定窗体宽高度。（需要IE9以上才支持）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">    width: 600px; height: 400px;</div><div class="line">    position: absolute; left: 50%; top: 50%;</div><div class="line">    transform: translate(-50%, -50%);    /* 50%为自身尺寸的一半 */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法四（有点奇葩）：上下左右均0位置定位；margin: auto于是，就居中了（别忘记给父类定位{position:relative;}。）</p>
<p>方法五：**还有一种办法是父级display:table;子级display:table-cell; vertical-align:center;</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端学习笔记系列-2.JavaScript中call()与apply()区别]]></title>
      <url>http://www.wusijie.tk/2016/08/08/applyandcall/</url>
      <content type="html"><![CDATA[<blockquote>
<p>转自<a href="http://my.oschina.net/warmcafe/blog/74973" target="_blank" rel="external">http://my.oschina.net/warmcafe/blog/74973</a></p>
</blockquote>
<p>今天读《JavaScript权威指南》时发现其中有段代码用到了apply方法用于递归实现数组的展开。可是我不懂这个函数的用法，因此查了一下，将资料整理如下。 </p>
<p>Javascript的每个Function对象中有一个apply方法： </p>
<blockquote>
<p>function.apply([thisObj[,argArray]])</p>
</blockquote>
<p>还有一个类似功能的call方法： </p>
<blockquote>
<p>function.call([thisObj[,arg1[, arg2[, [,.argN]]]]])</p>
</blockquote>
<h3 id="它们各自的定义："><a href="#它们各自的定义：" class="headerlink" title="它们各自的定义："></a>它们各自的定义：</h3><ul>
<li>apply：应用某一对象的一个方法，用另一个对象替换当前对象。 </li>
<li>call：调用一个对象的一个方法，以另一个对象替换当前对象。 </li>
</ul>
<h4 id="它们的共同之处："><a href="#它们的共同之处：" class="headerlink" title="它们的共同之处："></a>它们的共同之处：</h4><ul>
<li>都“可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。”——摘自JScript5.5 .chm </li>
</ul>
<h4 id="它们的不同之处："><a href="#它们的不同之处：" class="headerlink" title="它们的不同之处："></a>它们的不同之处：</h4><ul>
<li>apply：最多只能有两个参数——新this对象和一个数组 argArray。如果给该方法传递多个参数，则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里面。如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。 </li>
<li>call：则是直接的参数列表，主要用在js对象各方法互相调用的时候，使当前this实例指针保持一致,或在特殊情况下需要改变this指针。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。  </li>
<li>更简单地说，apply和call功能一样，只是传入的参数列表形式不同：如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) </li>
</ul>
<p>示例代码（注：注释中是call的用法，与上面apply的实现效果相同）： </p>
<p>（1）基本用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function add(a,b)</div><div class="line">&#123;</div><div class="line">    alert(a+b);</div><div class="line">&#125;</div><div class="line">function sub(a,b)</div><div class="line">&#123;</div><div class="line">    alert(a-b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add.apply(sub,[3,1]);</div><div class="line">//add.call(sub,3,1);</div></pre></td></tr></table></figure></p>
<p>（2）实现继承：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function Animal(name)&#123;    </div><div class="line">    this.name = name;    </div><div class="line">    this.showName = function()&#123;    </div><div class="line">        alert(this.name);    </div><div class="line">    &#125;    </div><div class="line">&#125;    </div><div class="line">   </div><div class="line">function Cat(name)&#123;  </div><div class="line">    Animal.apply(this, [name]);</div><div class="line">    //Animal.call(this, name);  </div><div class="line">&#125;    </div><div class="line">var cat = new Cat(&quot;Black Cat&quot;);   </div><div class="line">cat.showName();</div></pre></td></tr></table></figure></p>
<p>（3）多重继承：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">function Class10()</div><div class="line">&#123;</div><div class="line">    this.showSub = function(a,b)</div><div class="line">    &#123;</div><div class="line">        alert(a-b);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Class11()</div><div class="line">&#123;</div><div class="line">    this.showAdd = function(a,b)</div><div class="line">    &#123;</div><div class="line">        alert(a+b);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Class2()</div><div class="line">&#123;</div><div class="line">    Class10.apply(this);</div><div class="line">    Class11.apply(this);</div><div class="line">    //Class10.call(this);</div><div class="line">    //Class11.call(this);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var c2=new Class2();</div><div class="line">c2.showSub(3,1);</div><div class="line">c2.showAdd(3,1);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>apply的其他巧妙用法： </p>
</blockquote>
<p>看到这里，我就会觉得既然apply和call的用法差不多，那么为什么还同时存在这两种方法呢？完全可以丢掉一个呀。后来才发现一篇文章中讲到apply因为它所传参数为数组这一特点还有许多其他的妙用。 </p>
<p>a) Math.max 可以实现得到数组中最大的一项： </p>
<p>因为Math.max 参数里面不支持Math.max([param1,param2]) 也就是数组，但是它支持Math.max(param1,param2,param3…)，所以可以根据apply的特点来解决 var max=Math.max.apply(null,array)，这样轻易的可以得到一个数组中最大的一项。(apply会将一个数组转换为一个参数接一个参数的传递给方法) </p>
<p>这块在调用的时候第一个参数给了一个null，这个是因为没有对象去调用这个方法，只需要用这个方法帮助运算，得到返回的结果就行，所以直接传递了一个null过去。 </p>
<p>b) Math.min  可以实现得到数组中最小的一项： </p>
<p>同样和 max是一个思想 var min=Math.min.apply(null,array)。 </p>
<p>c) Array.prototype.push 可以实现两个数组合并： </p>
<p>同样push方法没有提供push一个数组，但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来转换一下这个数组，即: </p>
<p>var arr1=new Array(“1”,”2”,”3”); </p>
<p>var arr2=new Array(“4”,”5”,”6”); </p>
<p>Array.prototype.push.apply(arr1,arr2);  </p>
<p>也可以这样理解，arr1调用了push方法，参数是通过apply将数组装换为参数列表的集合。 </p>
<p>d) 小结：通常在什么情况下,可以使用apply类似Math.min等之类的特殊用法: </p>
<p>一般在目标函数只需要n个参数列表,而不接收一个数组的形式（[param1[,param2[,…[,paramN]]]]），可以通过apply的方式巧妙地解决这个问题。 </p>
<blockquote>
<p>参考资源： </p>
</blockquote>
<p>（1）[JavaScript]Call和Apply方法 </p>
<p>（2）JS中的call()和apply()方法 </p>
<p>（3）Js apply方法详解 </p>
<blockquote>
<p>补充资料： </p>
</blockquote>
<p>（1）javascript中apply方法和call方法的作用以及prototype.js中的应用 </p>
<p>（2）js中apply方法的使用 </p>
<p>（3）js中apply方法的使用(2) </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端学习笔记系列-1.浮动清除]]></title>
      <url>http://www.wusijie.tk/2016/07/28/float-clean/</url>
      <content type="html"><![CDATA[<h3 id="清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法？"><a href="#清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法？" class="headerlink" title="清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法？"></a>清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法？</h3><blockquote>
<p>因为浮动会使当前标签产生向上浮的效果，同时会影响到前后标签、父级标签的位置及 width height 属性。<br>而且同样的代码，在各种浏览器中显示效果也有可能不相同，这样让清除浮动更难了。</p>
</blockquote>
<a id="more"></a>
<h3 id="推荐的方法"><a href="#推荐的方法" class="headerlink" title="推荐的方法"></a>推荐的方法</h3><h4 id="方法1：结尾处加空div标签clear-both"><a href="#方法1：结尾处加空div标签clear-both" class="headerlink" title="方法1：结尾处加空div标签clear:both"></a>方法1：结尾处加空div标签clear:both</h4><p>原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度<br>优点：简单，代码少，浏览器支持好，不容易出现怪问题<br>缺点：不少初学者不理解原理；如果页面浮动布局多，就要增加很多空div，让人感觉很不爽<br>建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法<br>评分：★★★☆☆ </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;style type=<span class="string">"text/css"</span>&gt; </div><div class="line">   .div1&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red&#125;</div><div class="line">   .div2&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>&#125;</div><div class="line">   </div><div class="line">   .<span class="attribute">left</span>&#123;float:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125;</div><div class="line">   .<span class="attribute">right</span>&#123;float:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125;</div><div class="line">   </div><div class="line">   <span class="comment">/*清除浮动代码*/</span></div><div class="line">   .clearfloat&#123;<span class="attribute">clear</span>:both&#125;</div><div class="line">&lt;/style&gt; </div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"div1"</span>&gt; </div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"right"</span>&gt;Right&lt;/div&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"clearfloat"</span>&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"div2"</span>&gt;</div><div class="line">       div2</div><div class="line">    &lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="方法2：父级div定义伪类-after和zoom"><a href="#方法2：父级div定义伪类-after和zoom" class="headerlink" title="方法2：父级div定义伪类:after和zoom"></a>方法2：父级div定义伪类:after和zoom</h4><p>原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题<br>优点：浏览器支持好，不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）<br>缺点：代码多，不少初学者不理解原理，要两句代码结合使用，才能让主流浏览器都支持<br>建议：推荐使用，建议定义公共类，以减少CSS代码<br>评分：★★★★☆ </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;style type=<span class="string">"text/css"</span>&gt; </div><div class="line">   .div1&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;&#125;</div><div class="line">   .div2&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>&#125;</div><div class="line">   </div><div class="line">   .<span class="attribute">left</span>&#123;float:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125;</div><div class="line">   .<span class="attribute">right</span>&#123;float:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125;</div><div class="line">   </div><div class="line">   <span class="comment">/*清除浮动代码*/</span></div><div class="line">   <span class="selector-class">.clearfloat</span>:after&#123;<span class="attribute">display</span>:block;<span class="attribute">clear</span>:both;<span class="attribute">content</span>:<span class="string">""</span>;<span class="attribute">visibility</span>:hidden;<span class="attribute">height</span>:<span class="number">0</span>&#125;</div><div class="line">   .clearfloat&#123;zoom:<span class="number">1</span>&#125;</div><div class="line">   &lt;/style&gt; </div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"div1 clearfloat"</span>&gt; </div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"right"</span>&gt;Right&lt;/div&gt; </div><div class="line">&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"div2"</span>&gt;</div><div class="line">   div2</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="方法3：父级div定义overflow-hidden"><a href="#方法3：父级div定义overflow-hidden" class="headerlink" title="方法3：父级div定义overflow:hidden"></a>方法3：父级div定义overflow:hidden</h4><p>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度<br>优点：简单，代码少，浏览器支持好<br>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏<br>建议：只推荐没有使用position或对overflow:hidden理解比较深的朋友使用<br>评分：★★★☆☆ </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;style type=<span class="string">"text/css"</span>&gt; </div><div class="line">   .div1&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span><span class="attribute">width</span>:<span class="number">98%</span>;<span class="attribute">overflow</span>:hidden&#125;</div><div class="line">   .div2&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>;<span class="attribute">width</span>:<span class="number">98%</span>&#125;</div><div class="line">   </div><div class="line">   .<span class="attribute">left</span>&#123;float:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125;</div><div class="line">   .<span class="attribute">right</span>&#123;float:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125;</div><div class="line">   &lt;/style&gt; </div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"div1"</span>&gt; </div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"right"</span>&gt;Right&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"div2"</span>&gt;</div><div class="line">   div2</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sip协议介绍]]></title>
      <url>http://www.wusijie.tk/2016/07/27/sip/</url>
      <content type="html"><![CDATA[<h2 id="什么是SIP"><a href="#什么是SIP" class="headerlink" title="什么是SIP?"></a>什么是SIP?</h2><blockquote>
<p>SIP is an application-layer control protocol that can establish, modify, and terminate multimedia sessions (conferences) such as Internet telephony calls.<br><a id="more"></a></p>
<h2 id="SIP-协议的特点"><a href="#SIP-协议的特点" class="headerlink" title="SIP 协议的特点"></a>SIP 协议的特点</h2></blockquote>
<ul>
<li>文本协议：易于实现，可读性强，结构灵活，易于扩展。</li>
<li>中性的底层传输协议：同时支持TCP和UDP，推荐使用UDP传输。</li>
<li>呼叫和媒体控制信息同时传送：利用SDP协议(Session Description Protocol)传送媒体信息。</li>
</ul>
<h2 id="SIP-分布式网络结构"><a href="#SIP-分布式网络结构" class="headerlink" title="SIP 分布式网络结构"></a>SIP 分布式网络结构</h2><p><img src="http://7xwui9.com1.z0.glb.clouddn.com/link-20160727153422.png" alt="SIP分布式网络结构图" title="SIP分布式网络结构图"></p>
<h2 id="SIP-消息"><a href="#SIP-消息" class="headerlink" title="SIP 消息"></a>SIP 消息</h2><h3 id="1-SIP消息格式"><a href="#1-SIP消息格式" class="headerlink" title="1.SIP消息格式"></a>1.SIP消息格式</h3><pre><code>SIP消息＝起始行
    *消息头部（1个或多个）
    CRLF（空行）
    [消息体]
</code></pre><h3 id="2-SIP-消息头格式"><a href="#2-SIP-消息头格式" class="headerlink" title="2.SIP 消息头格式"></a>2.SIP 消息头格式</h3><p>SIP 的格式和语法与==HTTP==基本相同.<br>一个SIP 消息头的<code>例子</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">-----------------------------------------------------------------</div><div class="line">                        SIP Header</div><div class="line">-----------------------------------------------------------------</div><div class="line">INVITE sip:5120@192.168.36.180 SIP/2.0</div><div class="line">Via: SIP/2.0/UDP 192.168.6.21:5060</div><div class="line">From: sip:5121@192.168.6.21</div><div class="line">To: &lt;sip:5120@192.168.36.180&gt;</div><div class="line">Call-ID: c2943000-e0563-2a1ce-2e323931@192.168.6.21</div><div class="line">CSeq: 100 INVITE</div><div class="line">Expires: 180</div><div class="line">User-Agent: Cisco IP Phone/ Rev. 1/ SIP enabled</div><div class="line">Accept: application/sdp</div><div class="line">Contact: sip:5121@192.168.6.21:5060</div><div class="line">Content-Type: application/sdp</div></pre></td></tr></table></figure></p>
<h3 id="3-SIP-主要头部字段"><a href="#3-SIP-主要头部字段" class="headerlink" title="3.SIP 主要头部字段"></a>3.SIP 主要头部字段</h3><ul>
<li>From：指示请求的发起者<br>  From：显示名<sip-url>；tag＝xxxx</sip-url></li>
<li>To：指明请求的接收者<br>  To：显示名<sip-url>；tag＝xxxx</sip-url></li>
<li>CALL-ID：用以标识一个特定的邀请或标识某一客户的所有登记<br>  Call-ID：本地标识@主机</li>
<li>Cseq：命令序号，相同呼叫中的不同请求消息的cseq递加1，重发请求的序号不变，ACK和CANCEL请求的序号与对应的INVITE相同<br>Cseq:100 INVITE</li>
<li>Via：Via字段用于指示请求经历的路径，确保响应和请求消息选择相同的路径<br>Via：发送协议发送方；隐藏参数；生存期参数；多播地址参数；接收方标记；分支参数</li>
<li>Contact：用于重定向，指出以后和用户通信的地址<br>Contact：地址；q参数；动作参数；失效参数；扩展属性 </li>
</ul>
<h2 id="建立通信的过程"><a href="#建立通信的过程" class="headerlink" title="建立通信的过程"></a>建立通信的过程</h2><p>使用SIP建立通信通常需要5个步骤:</p>
<ol>
<li>用户代理进行注册、初始化和定位.</li>
<li>决定在呼叫中要使用的媒体类型.</li>
<li>建立呼叫.</li>
<li>改变呼叫，例如呼叫转移，SDP重新协商.</li>
<li>终结呼叫.</li>
</ol>
<h2 id="简单的SIP呼叫建立和拆除过程"><a href="#简单的SIP呼叫建立和拆除过程" class="headerlink" title="简单的SIP呼叫建立和拆除过程"></a>简单的SIP呼叫建立和拆除过程</h2><p><img src="http://7xwui9.com1.z0.glb.clouddn.com/link-20160727160747.png" alt="过程示意图" title="过程示意图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[作为一个前端，可以如何机智地弄坏一台电脑？]]></title>
      <url>http://www.wusijie.tk/2016/07/26/hello-world/</url>
      <content type="html"><![CDATA[<p>有人说，前端的界限就在浏览器那儿。<br>无论你触发了多少bug，最多导致浏览器崩溃，对系统影响不到哪去。<br>这就像二次元各种炫酷的毁灭世界，都不会导致三次元的世界末日。<br>然而，作为一个前端，我发现是有方式打开次元大门的…<br>这个实验脑洞较大，动机无聊，但某种意义上反映了一些安全问题。<br>想象一下，有天你在家里上网，吃着火锅还唱着歌，点开一个链接，电脑突然就蓝屏了！想想还真有点小激动。<br><a id="more"></a></p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>故事得从localStorage说起。<br>html5的本地存储，相信大家都不陌生。将数据以二进制文件形式存储到本地，在当前应用得非常广泛。<br>windows下的chrome，localStorage存储于C:\Users\xxx\AppData\Local\Google\Chrome\User Data\Default\Local Storage文件夹中。但如果任由网页无限写文件，对用户硬盘的伤害可想而知，因而浏览器对其做了大小限制。<br>对于一个域名+端口，PC侧的上限是5M-10M之间，移动侧是则不大于2.5M。<br>那么问题就变成：这样的限制足够保护用户硬盘了吗？</p>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
